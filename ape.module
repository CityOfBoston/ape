<?php

/**
 * @file
 * Allows finer control of the Cache Control header.
 */

/**
 * Implements hook_permision().
 */
function ape_permission() {
  return array(
    'administer ape' => array(
      'title' => t('Administer advanced page expiration'),
      'description' => t('Set advanced page expiration rules.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ape_menu() {
  $items['admin/config/development/ape'] = array(
    'title' => 'Advanced page expiration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ape_admin_settings'),
    'description' => 'Configure the strategy for the cache-control header which defines cache lifetime for external caching systems.',
    'access arguments' => array('access ape'),
    'file' => 'ape.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_init().
 *
 * Set an exception length cache-control, or if no match set a global value.
 */
function ape_init() {

  // Check to see if another module or hook has already set an APE header. This
  // allows rules or other module integration to take precedent.
  if (!isset($GLOBALS['_ape_cache_set']) && user_is_anonymous()) {
    $max_age = 0;
    if (ape_check_path(variable_get('ape_exceptions', ''), $_GET['q'])) {
      $max_age = variable_get('ape_exceptions_lifetime', 0);
    }
    else {
      $max_age = variable_get('page_cache_maximum_age', 0);
    }
    ape_set_cache_header($max_age);
  }
}

/**
 * Check if global page caching is enabled and the user is anonymous.
 *
 * @global object $user
 * @return bool
 *   True if the user is anonymous, caching is enabled and the path is not in
 *   the excludes list.
 */
function ape_check_cacheable() {

  if (user_is_anonymous() && variable_get('cache', 0)) {
    $excluded = ape_check_path(variable_get('ape_exclusions', ''), $_GET['q']);
    if (!$excluded) {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Sets the cache control header.
 *
 * @param int $max_age
 *   The cache expiration age, in seconds.
 * @param bool $check
 *   Check if the page is cacheable when setting header.
 */
function ape_set_cache_header($max_age = 0, $check = TRUE) {
  $name = 'Cache-Control';
  $value = 'no-cache, must-revalidate, post-check=0, pre-check=0';
  $cacheable = $check ? ape_check_cacheable() : FALSE;
  if ($max_age > 0 && $cacheable) {
    $value = 'public, max-age=' . $max_age;
  }
  drupal_add_http_header($name, $value);
  $GLOBALS['_ape_cache_set'] = TRUE;
}

/**
 * Checks saved paths against the current request path.
 *
 * @param string $haystack
 *   The list of paths to compare.
 * @param string $path
 *   The path to check against.
 *
 * @return bool
 *   Whether the path was found within the haystack.
 */
function ape_check_path($haystack, $path = NULL) {
  if (!$path) {
    $path = $_GET['q'];
  }
  // This is pretty much lifted from the block module.
  // Convert path to lowercase. This allows comparison of the same path
  // with different case. Ex: /Page, /page, /PAGE.
  $pages = drupal_strtolower($haystack);
  // Convert the Drupal path to lowercase.
  $path = drupal_strtolower(drupal_get_path_alias($path));
  // Compare the lowercase internal and lowercase path alias (if any).
  $page_match = drupal_match_path($path, $pages);
  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($path, $pages);
  }
  return $page_match;
}

/**
 * Determines whether a user may administer ape.
 *
 * Required for rules integration.
 */
function ape_rules_access($type, $name) {
  return user_access('administer ape');
}

/**
 * Implements hook_drupal_goto_alter().
 *
 * If a drupal_goto is called, detect if it is a 301 or 302 and set the
 * cache-control header appropriately based on configured options.
 */
function ape_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  $max_age = 0;
  if ($http_response_code == 301) {
    $max_age = variable_get('ape_301_lifetime', 0);
  }
  elseif ($http_response_code == 302) {
    $max_age = variable_get('ape_302_lifetime', 0);
  }
  ape_set_cache_header($max_age);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove page_cache_maximum_age selection from main performance page and
 * instead direct users to this module's config page. Also do a little cleanup
 * to clarify external caching.
 */
function ape_form_system_performance_settings_alter(&$form, &$form_state) {
  unset($form['caching']['page_cache_maximum_age']);

  $form['clear_cache']['#weight'] = -5;
  $form['caching']['#title'] = t('General Caching');
  $form['caching']['#weight'] = -4;
  $form['ape_caching'] = array(
    '#type' => 'fieldset',
    '#title' => t('External page caching'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#weight' => -3,
  );

  $form['ape_caching']['page_cache_maximum_age'] = array(
    '#markup' => l(t('Configure external page caching strategy with APE.'), 'admin/config/development/ape'),
  );
}
